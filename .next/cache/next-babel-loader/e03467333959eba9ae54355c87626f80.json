{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nexport default function Login() {\n  const {\n    0: username,\n    1: setUsername\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: mess,\n    1: setMess\n  } = useState('');\n  const SIGNUP = gql`\n    mutation signup($username: String, $password: String, $email: String) {\n            signup(user: {\n                        username: $username,\n                        password: $password,\n                        email: $email\n                        }\n                )\n                         {\n    mess\n  }\n}\n    `;\n  const [signup] = useMutation(SIGNUP);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    await signup({\n      variables: {\n        username: username,\n        password: password,\n        email: email\n      }\n    }).then(res => {\n      if (res.data.signup.mess === \"Signup successfully!\") {\n        setMess(res.data.signup.mess);\n        console.log(res.data.signup.mess);\n        setUsername('');\n        setPassword('');\n      } else {\n        setMess(res.data.signup.mess);\n      }\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(\"label\", null, \"Username\"), __jsx(\"br\", null), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter username\",\n    value: username,\n    onChange: event => setUsername(event.target.value)\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"label\", null, \"Username\"), __jsx(\"br\", null), __jsx(\"input\", {\n    type: \"email\",\n    placeholder: \"Enter email\",\n    value: email,\n    onChange: event => setEmail(event.target.value)\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"label\", null, \"Password\"), __jsx(\"br\", null), __jsx(\"input\", {\n    type: \"password\",\n    value: password,\n    onChange: event => setPassword(event.target.value),\n    placeholder: \"Enter password\"\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"p\", {\n    style: {\n      color: \"red\"\n    }\n  }, mess), __jsx(\"button\", {\n    type: \"submit\",\n    onClick: handleSubmit\n  }, \"Signup\"));\n}","map":{"version":3,"sources":["/home/hamsa/training/GraphQL-RennyKa/pages/signup.js"],"names":["React","useState","useMutation","gql","Login","username","setUsername","password","setPassword","email","setEmail","mess","setMess","SIGNUP","signup","handleSubmit","event","preventDefault","variables","then","res","data","console","log","target","value","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,GAAtB,QAAiC,gBAAjC;AAEA,eAAe,SAASC,KAAT,GAAiB;AAC5B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACU,IAAD;AAAA,OAAOC;AAAP,MAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMY,MAAM,GAAGV,GAAI;;;;;;;;;;;;KAAnB;AAaA,QAAM,CAACW,MAAD,IAAWZ,WAAW,CAACW,MAAD,CAA5B;;AAEA,QAAME,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAClCA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMH,MAAM,CAAC;AACTI,MAAAA,SAAS,EAAE;AACPb,QAAAA,QAAQ,EAAEA,QADH;AAEPE,QAAAA,QAAQ,EAAEA,QAFH;AAGPE,QAAAA,KAAK,EAAEA;AAHA;AADF,KAAD,CAAN,CAMHU,IANG,CAMEC,GAAG,IAAI;AACX,UAAIA,GAAG,CAACC,IAAJ,CAASP,MAAT,CAAgBH,IAAhB,KAAyB,sBAA7B,EAAqD;AACjDC,QAAAA,OAAO,CAACQ,GAAG,CAACC,IAAJ,CAASP,MAAT,CAAgBH,IAAjB,CAAP;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACC,IAAJ,CAASP,MAAT,CAAgBH,IAA5B;AACAL,QAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,QAAAA,WAAW,CAAC,EAAD,CAAX;AACH,OALD,MAKO;AACHI,QAAAA,OAAO,CAACQ,GAAG,CAACC,IAAJ,CAASP,MAAT,CAAgBH,IAAjB,CAAP;AACH;AACJ,KAfK,CAAN;AAgBH,GAlBD;;AAoBA,SACI,mBACI,gCADJ,EAEI,iBAFJ,EAGI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,gBAA/B;AAAgD,IAAA,KAAK,EAAEN,QAAvD;AAAiE,IAAA,QAAQ,EAAEW,KAAK,IAAIV,WAAW,CAACU,KAAK,CAACQ,MAAN,CAAaC,KAAd;AAA/F,IAHJ,EAII,iBAJJ,EAKI,iBALJ,EAMI,gCANJ,EAOI,iBAPJ,EAQI;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,WAAW,EAAC,aAAhC;AAA8C,IAAA,KAAK,EAAEhB,KAArD;AAA4D,IAAA,QAAQ,EAAEO,KAAK,IAAIN,QAAQ,CAACM,KAAK,CAACQ,MAAN,CAAaC,KAAd;AAAvF,IARJ,EASI,iBATJ,EAUI,iBAVJ,EAWI,gCAXJ,EAYI,iBAZJ,EAaI;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,KAAK,EAAElB,QAA9B;AAAwC,IAAA,QAAQ,EAAES,KAAK,IAAIR,WAAW,CAACQ,KAAK,CAACQ,MAAN,CAAaC,KAAd,CAAtE;AAA4F,IAAA,WAAW,EAAC;AAAxG,IAbJ,EAcI,iBAdJ,EAeI,iBAfJ,EAgBI;AAAG,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAV,KAA6Bf,IAA7B,CAhBJ,EAiBI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEI;AAA/B,cAjBJ,CADJ;AAqBH","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\n\nexport default function Login() {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n    const [mess, setMess] = useState('');\n    const SIGNUP = gql`\n    mutation signup($username: String, $password: String, $email: String) {\n            signup(user: {\n                        username: $username,\n                        password: $password,\n                        email: $email\n                        }\n                )\n                         {\n    mess\n  }\n}\n    `\n    const [signup] = useMutation(SIGNUP);\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        await signup({\n            variables: {\n                username: username,\n                password: password,\n                email: email\n            }\n        }).then(res => {\n            if (res.data.signup.mess === \"Signup successfully!\") {\n                setMess(res.data.signup.mess);\n                console.log(res.data.signup.mess);\n                setUsername('');\n                setPassword('');\n            } else {\n                setMess(res.data.signup.mess);\n            }\n        })\n    }\n\n    return (\n        <div>\n            <label>Username</label>\n            <br />\n            <input type=\"text\" placeholder=\"Enter username\" value={username} onChange={event => setUsername(event.target.value)} />\n            <br />\n            <br />\n            <label>Username</label>\n            <br />\n            <input type=\"email\" placeholder=\"Enter email\" value={email} onChange={event => setEmail(event.target.value)} />\n            <br />\n            <br />\n            <label>Password</label>\n            <br />\n            <input type=\"password\" value={password} onChange={event => setPassword(event.target.value)} placeholder=\"Enter password\" />\n            <br />\n            <br />\n            <p style={{ color: \"red\" }}>{mess}</p>\n            <button type=\"submit\" onClick={handleSubmit}>Signup</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}