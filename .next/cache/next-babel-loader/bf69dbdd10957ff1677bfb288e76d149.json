{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation login($username: String, $password: String) {\\n            login(user: {\\n                        username: $username,\\n                        password: $password\\n                        }\\n                )\\n                         {\\n    mess\\n  }\\n}\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport Router from \"next/router\";\nimport { useMutation, gql } from '@apollo/client';\nexport default function Login() {\n  _s();\n\n  var _useState = useState(''),\n      username = _useState[0],\n      setUsername = _useState[1];\n\n  var _useState2 = useState(''),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(''),\n      mess = _useState3[0],\n      setMess = _useState3[1];\n\n  var LOGIN = gql(_templateObject());\n\n  var _useMutation = useMutation(LOGIN),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addTodo = _useMutation2[0];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault(); // await axios.post('login', {\n              //     username: username,\n              //     password: password\n              // }).then(res => {\n              //     setMess(res.data);\n              //     Router.replace(\"/employees\");\n              // }).catch(rej => {\n              //     setMess('Wrong username or password, please check again!')\n              // });\n              // console.log(username, password, 'aaaaaa', addTodo());\n\n              _context.next = 3;\n              return addTodo({\n                variables: {\n                  username: username,\n                  password: password\n                }\n              }).then(function (res) {\n                if (res.data.login.mess === \"Login successully!\") {\n                  setMess(res.data.login.mess);\n                  console.log(res.data.login.mess);\n                  setUsername('');\n                  setPassword('');\n                  Router.replace(\"/employees\");\n                }\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", null, __jsx(\"label\", null, \"Username\"), __jsx(\"br\", null), __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter username\",\n    value: username,\n    onChange: function onChange(event) {\n      return setUsername(event.target.value);\n    }\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"label\", null, \"Password\"), __jsx(\"br\", null), __jsx(\"input\", {\n    type: \"password\",\n    value: password,\n    onChange: function onChange(event) {\n      return setPassword(event.target.value);\n    },\n    placeholder: \"Enter password\"\n  }), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"p\", {\n    style: {\n      color: \"red\"\n    }\n  }, mess), __jsx(\"button\", {\n    type: \"submit\",\n    onClick: handleSubmit\n  }, \"Login\"));\n}\n\n_s(Login, \"xv0v9fdBrTtYYk047ZFcP13Oljk=\", false, function () {\n  return [useMutation];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/hamsa/training/GraphQL-RennyKa/pages/login.js"],"names":["React","useState","Router","useMutation","gql","Login","username","setUsername","password","setPassword","mess","setMess","LOGIN","addTodo","handleSubmit","event","preventDefault","variables","then","res","data","login","console","log","replace","target","value","color"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,WAAT,EAAsBC,GAAtB,QAAiC,gBAAjC;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAAA,kBACIJ,QAAQ,CAAC,EAAD,CADZ;AAAA,MACrBK,QADqB;AAAA,MACXC,WADW;;AAAA,mBAEIN,QAAQ,CAAC,EAAD,CAFZ;AAAA,MAErBO,QAFqB;AAAA,MAEXC,WAFW;;AAAA,mBAGJR,QAAQ,CAAC,EAAD,CAHJ;AAAA,MAGrBS,IAHqB;AAAA,MAGfC,OAHe;;AAI5B,MAAMC,KAAK,GAAGR,GAAH,mBAAX;;AAJ4B,qBAgBVD,WAAW,CAACS,KAAD,CAhBD;AAAA;AAAA,MAgBrBC,OAhBqB;;AAkB5B,MAAMC,YAAY;AAAA,wEAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AACjBA,cAAAA,KAAK,CAACC,cAAN,GADiB,CAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAXiB;AAAA,qBAYXH,OAAO,CAAC;AACVI,gBAAAA,SAAS,EAAE;AACPX,kBAAAA,QAAQ,EAAEA,QADH;AAEPE,kBAAAA,QAAQ,EAAEA;AAFH;AADD,eAAD,CAAP,CAKHU,IALG,CAKE,UAAAC,GAAG,EAAI;AACX,oBAAIA,GAAG,CAACC,IAAJ,CAASC,KAAT,CAAeX,IAAf,KAAwB,oBAA5B,EAAkD;AAC9CC,kBAAAA,OAAO,CAACQ,GAAG,CAACC,IAAJ,CAASC,KAAT,CAAeX,IAAhB,CAAP;AACAY,kBAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACC,IAAJ,CAASC,KAAT,CAAeX,IAA3B;AACAH,kBAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,kBAAAA,WAAW,CAAC,EAAD,CAAX;AACAP,kBAAAA,MAAM,CAACsB,OAAP,CAAe,YAAf;AACH;AAEJ,eAdK,CAZW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZV,YAAY;AAAA;AAAA;AAAA,KAAlB;;AA8BA,SACI,mBACI,gCADJ,EAEI,iBAFJ,EAGI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,gBAA/B;AAAgD,IAAA,KAAK,EAAER,QAAvD;AAAiE,IAAA,QAAQ,EAAE,kBAAAS,KAAK;AAAA,aAAIR,WAAW,CAACQ,KAAK,CAACU,MAAN,CAAaC,KAAd,CAAf;AAAA;AAAhF,IAHJ,EAII,iBAJJ,EAKI,iBALJ,EAMI,gCANJ,EAOI,iBAPJ,EAQI;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,KAAK,EAAElB,QAA9B;AAAwC,IAAA,QAAQ,EAAE,kBAAAO,KAAK;AAAA,aAAIN,WAAW,CAACM,KAAK,CAACU,MAAN,CAAaC,KAAd,CAAf;AAAA,KAAvD;AAA4F,IAAA,WAAW,EAAC;AAAxG,IARJ,EASI,iBATJ,EAUI,iBAVJ,EAWI;AAAG,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAAV,KAA6BjB,IAA7B,CAXJ,EAYI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEI;AAA/B,aAZJ,CADJ;AAgBH;;GAhEuBT,K;UAgBFF,W;;;KAhBEE,K","sourcesContent":["import React, { useState } from 'react';\nimport Router from \"next/router\";\nimport { useMutation, gql } from '@apollo/client';\n\nexport default function Login() {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [mess, setMess] = useState('');\n    const LOGIN = gql`\n    mutation login($username: String, $password: String) {\n            login(user: {\n                        username: $username,\n                        password: $password\n                        }\n                )\n                         {\n    mess\n  }\n}\n    `\n    const [addTodo] = useMutation(LOGIN);\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        // await axios.post('login', {\n        //     username: username,\n        //     password: password\n        // }).then(res => {\n        //     setMess(res.data);\n        //     Router.replace(\"/employees\");\n        // }).catch(rej => {\n        //     setMess('Wrong username or password, please check again!')\n        // });\n        // console.log(username, password, 'aaaaaa', addTodo());\n        await addTodo({\n            variables: {\n                username: username,\n                password: password\n            }\n        }).then(res => {\n            if (res.data.login.mess === \"Login successully!\") {\n                setMess(res.data.login.mess);\n                console.log(res.data.login.mess);\n                setUsername('');\n                setPassword('');\n                Router.replace(\"/employees\");\n            }\n\n        })\n\n    }\n\n    return (\n        <div>\n            <label>Username</label>\n            <br />\n            <input type=\"text\" placeholder=\"Enter username\" value={username} onChange={event => setUsername(event.target.value)} />\n            <br />\n            <br />\n            <label>Password</label>\n            <br />\n            <input type=\"password\" value={password} onChange={event => setPassword(event.target.value)} placeholder=\"Enter password\" />\n            <br />\n            <br />\n            <p style={{ color: \"red\" }}>{mess}</p>\n            <button type=\"submit\" onClick={handleSubmit}>Login</button>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}